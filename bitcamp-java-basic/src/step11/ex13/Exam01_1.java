// 캡슐화(encapsulation)

package step11.ex13;

public class Exam01_1 {
    
    public static void main(String[] args) {
        //환자 데이터 등록
        Customer c1 = new Customer();
        c1.name = "홍길동";
        c1.age = 300;
        c1.weight = 70;
        c1.height = -50;
        
        //위 코드의 문제점 분석
        // => 각각의 값이 인스턴스 변수에 들어갈 수 있는 값이기 때문에 컴파일 오류는 발생하지 않는다.
        // => 그러나, "환자"데이터로서 유효한 값은 아니다.
        // => 위의 데이터는 잘못된 데이터
        //    즉, 환자를 추상화시킨 목적을 상실한 것이다. 
        //    즉, 추상화가 무너진 것이다.
        // => Customer는 환자 데이터를 다루기 위해서 만들어진 것이지
        //    비과학적 데이터를 다루기 위해서 만든 클래스가 아니다.
        //    즉, 유효하지 않은 데이터를 넣게 되면 클래스를 정의한 이유를 상실
        // => 이를 방지하기 위해 만들어진 문법이 '캡슐화(encapsulation)'이다.
        
        //캡슐화
        // => 인스턴스 변수의 추상화 목적에 맞는 유효한 값만 넣을 수 있도록
        //    외부 접근을 제한하는 문법
        // - 제한 범위
        // 1) private : 클래스 범위 내
        // 2) (default) : 클래스 범위내, 같은 패키지
        // 3) protected : 클래스 범위내, 같은 패키지, 자식클래스
        // 4) public : 모두 접근 가능
        //
        
        
    }
}
